{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { ApiUsers } from 'src/app/Modules/Config/Api';\nimport { Keys } from 'src/app/Modules/Config/Config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nclass AuthService {\n  constructor(HttpClient, router) {\n    this.HttpClient = HttpClient;\n    this.router = router;\n  }\n  login(name, password) {\n    return this.HttpClient.get(`${ApiUsers}?email=${name}&password=${password}`, httpOptions);\n  }\n  guard(email) {\n    let Key;\n    this.HttpClient.get(`${ApiUsers}?email=${email}`).subscribe(res => {\n      let response = Object.entries(res);\n      Key = response[0][1].Key;\n      sessionStorage.setItem(Keys, Key);\n      this.router.navigate([\"/\"]);\n    });\n  }\n  User() {\n    var Key = sessionStorage.getItem(Keys);\n    return this.HttpClient.get(`${ApiUsers}?Key=${Key}`, httpOptions);\n  }\n  Check() {\n    if (sessionStorage.getItem(Keys)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  ForgotPassword(email) {\n    return this.HttpClient.get(`${ApiUsers}?email=${email}`, httpOptions);\n  }\n  FindByColumn(Colmun, value) {\n    return this.HttpClient.get(`${ApiUsers}?${Colmun}=${value}`, httpOptions);\n  }\n  ResetPassword(id, User) {\n    return this.HttpClient.put(`${ApiUsers}/${id}`, User);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","ApiUsers","Keys","httpOptions","headers","AuthService","constructor","HttpClient","router","login","name","password","get","guard","email","Key","subscribe","res","response","Object","entries","sessionStorage","setItem","navigate","User","getItem","Check","ForgotPassword","FindByColumn","Colmun","value","ResetPassword","id","put","i0","ɵɵinject","i1","i2","Router","factory","ɵfac","providedIn"],"sources":["E:\\Workspace\\Basics\\Angular\\Point Of Sale\\PointOfSale\\src\\app\\Services\\Auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'src/app/Modules/Model/Users';\r\nimport { ApiUsers } from 'src/app/Modules/Config/Api';\r\nimport { Keys } from 'src/app/Modules/Config/Config';\r\nimport { Router } from '@angular/router';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n  })\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AuthService {\r\n  Users: User;\r\n\r\n  constructor(private HttpClient: HttpClient, private router: Router) { }\r\n\r\n  login(name: any, password: any): Observable<User> {\r\n    return this.HttpClient.get<User>(`${ApiUsers}?email=${name}&password=${password}`, httpOptions);\r\n  }\r\n\r\n  guard(email: any): void {\r\n    let Key: any;\r\n    this.HttpClient.get(`${ApiUsers}?email=${email}`).subscribe( res => {\r\n      let response = Object.entries(res);\r\n      Key = response[0][1].Key;\r\n      sessionStorage.setItem(Keys, Key);\r\n      this.router.navigate([\"/\"])\r\n    })\r\n  }\r\n\r\n  User(): Observable<User> {\r\n    var Key = sessionStorage.getItem(Keys);\r\n    return this.HttpClient.get<User>(`${ApiUsers}?Key=${Key}`, httpOptions);\r\n  }\r\n  \r\n  Check(): boolean {\r\n    if(sessionStorage.getItem(Keys))\r\n    {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  ForgotPassword(email: any): Observable<User> {\r\n    return this.HttpClient.get<User>(`${ApiUsers}?email=${email}`, httpOptions);\r\n  }\r\n\r\n  FindByColumn(Colmun: string, value: any): Observable<User>{\r\n    return this.HttpClient.get<User>(`${ApiUsers}?${Colmun}=${value}`, httpOptions);\r\n  }\r\n\r\n  ResetPassword(id: any, User: User): Observable<User> {\r\n    return this.HttpClient.put<User>(`${ApiUsers}/${id}`, User);\r\n  }\r\n  \r\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,IAAI,QAAQ,+BAA+B;;;;AAGpD,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIJ,WAAW,CAAC;IACvB,cAAc,EAAE;GACjB;CACF;AAED,MAIaK,WAAW;EAGtBC,YAAoBC,UAAsB,EAAUC,MAAc;IAA9C,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,MAAM,GAANA,MAAM;EAAY;EAEtEC,KAAKA,CAACC,IAAS,EAAEC,QAAa;IAC5B,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAO,GAAGX,QAAQ,UAAUS,IAAI,aAAaC,QAAQ,EAAE,EAAER,WAAW,CAAC;EACjG;EAEAU,KAAKA,CAACC,KAAU;IACd,IAAIC,GAAQ;IACZ,IAAI,CAACR,UAAU,CAACK,GAAG,CAAC,GAAGX,QAAQ,UAAUa,KAAK,EAAE,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAG;MACjE,IAAIC,QAAQ,GAAGC,MAAM,CAACC,OAAO,CAACH,GAAG,CAAC;MAClCF,GAAG,GAAGG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACH,GAAG;MACxBM,cAAc,CAACC,OAAO,CAACpB,IAAI,EAAEa,GAAG,CAAC;MACjC,IAAI,CAACP,MAAM,CAACe,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAC,IAAIA,CAAA;IACF,IAAIT,GAAG,GAAGM,cAAc,CAACI,OAAO,CAACvB,IAAI,CAAC;IACtC,OAAO,IAAI,CAACK,UAAU,CAACK,GAAG,CAAO,GAAGX,QAAQ,QAAQc,GAAG,EAAE,EAAEZ,WAAW,CAAC;EACzE;EAEAuB,KAAKA,CAAA;IACH,IAAGL,cAAc,CAACI,OAAO,CAACvB,IAAI,CAAC,EAC/B;MACE,OAAO,IAAI;KACZ,MACI;MACH,OAAO,KAAK;;EAEhB;EAEAyB,cAAcA,CAACb,KAAU;IACvB,OAAO,IAAI,CAACP,UAAU,CAACK,GAAG,CAAO,GAAGX,QAAQ,UAAUa,KAAK,EAAE,EAAEX,WAAW,CAAC;EAC7E;EAEAyB,YAAYA,CAACC,MAAc,EAAEC,KAAU;IACrC,OAAO,IAAI,CAACvB,UAAU,CAACK,GAAG,CAAO,GAAGX,QAAQ,IAAI4B,MAAM,IAAIC,KAAK,EAAE,EAAE3B,WAAW,CAAC;EACjF;EAEA4B,aAAaA,CAACC,EAAO,EAAER,IAAU;IAC/B,OAAO,IAAI,CAACjB,UAAU,CAAC0B,GAAG,CAAO,GAAGhC,QAAQ,IAAI+B,EAAE,EAAE,EAAER,IAAI,CAAC;EAC7D;;AA5CWnB,WAAW,C;mBAAXA,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAA7B,UAAA,GAAA2B,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAC,MAAA;AAAA;AAAXjC,WAAW,C;SAAXA,WAAW;EAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;EAAAC,UAAA,EAHV;AAAM;SAGPpC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}