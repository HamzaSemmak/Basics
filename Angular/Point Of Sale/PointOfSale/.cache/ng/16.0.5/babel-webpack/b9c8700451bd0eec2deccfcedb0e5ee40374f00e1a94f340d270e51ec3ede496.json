{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { ApiBasket } from 'src/app/Modules/Config/Api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../Auth/auth.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nclass BasketService {\n  constructor(HttpClient, AuthService) {\n    this.HttpClient = HttpClient;\n    this.AuthService = AuthService;\n    this.id = Math.floor(Math.random() * 100000);\n    var date = new Date();\n    this.dateOfToday = date.toISOString().split('T')[0];\n    this.AuthService.User().subscribe(Response => {\n      let res = Object.entries(Response);\n      this.User = {\n        id: res[0][1].id,\n        name: res[0][1].name,\n        gender: res[0][1].gender,\n        email: res[0][1].email,\n        password: res[0][1].password,\n        active: res[0][1].active,\n        Key: res[0][1].Key\n      };\n    });\n  }\n  getBasket() {\n    return this.HttpClient.get(ApiBasket, httpOptions);\n  }\n  setProductToBasket(Product, User) {\n    this.Basket = {\n      id: this.id,\n      product: Product,\n      date: this.dateOfToday,\n      user: User,\n      quantite: 1\n    };\n    return this.HttpClient.post(ApiBasket, this.Basket, httpOptions);\n  }\n}\nBasketService.ɵfac = function BasketService_Factory(t) {\n  return new (t || BasketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nBasketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BasketService,\n  factory: BasketService.ɵfac,\n  providedIn: 'root'\n});\nexport { BasketService };","map":{"version":3,"names":["HttpHeaders","ApiBasket","httpOptions","headers","BasketService","constructor","HttpClient","AuthService","id","Math","floor","random","date","Date","dateOfToday","toISOString","split","User","subscribe","Response","res","Object","entries","name","gender","email","password","active","Key","getBasket","get","setProductToBasket","Product","Basket","product","user","quantite","post","i0","ɵɵinject","i1","i2","factory","ɵfac","providedIn"],"sources":["C:\\WorkSpace\\Basics\\Angular\\Point Of Sale\\PointOfSale\\src\\app\\Services\\Basket\\basket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiBasket } from 'src/app/Modules/Config/Api';\r\nimport { basket } from 'src/app/Modules/Model/basket';\r\nimport { Products } from 'src/app/Modules/Model/Products';\r\nimport { User } from 'src/app/Modules/Model/Users';\r\nimport { AuthService } from '../Auth/auth.service';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n  })\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class BasketService {\r\n  Basket: basket;\r\n  dateOfToday: any;\r\n  id: number = Math.floor(Math.random() * 100000);\r\n  User: User\r\n\r\n  constructor(private HttpClient: HttpClient, private AuthService: AuthService) { \r\n    var date = new Date();\r\n    this.dateOfToday = date.toISOString().split('T')[0];\r\n    this.AuthService.User().subscribe(\r\n      (Response) => {\r\n        let res = Object.entries(Response);\r\n        this.User = { \r\n          id: res[0][1].id,\r\n          name:  res[0][1].name,\r\n          gender:  res[0][1].gender,\r\n          email:  res[0][1].email,\r\n          password:  res[0][1].password,\r\n          active:  res[0][1].active,\r\n          Key:  res[0][1].Key,\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  getBasket(): Observable<basket[]> {\r\n    return this.HttpClient.get<basket[]>(ApiBasket , httpOptions);\r\n  }\r\n\r\n  setProductToBasket(Product: Products, User: User): Observable<basket> {\r\n    this.Basket = {\r\n      id: this.id,\r\n      product: Product,\r\n      date: this.dateOfToday,\r\n      user: User,\r\n      quantite: 1\r\n    }\r\n    return this.HttpClient.post<basket>(ApiBasket, this.Basket, httpOptions);\r\n  }\r\n\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,SAAS,QAAQ,4BAA4B;;;;AAMtD,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IACvB,cAAc,EAAE;GACjB;CACF;AAED,MAIaI,aAAa;EAMxBC,YAAoBC,UAAsB,EAAUC,WAAwB;IAAxD,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAH/D,KAAAC,EAAE,GAAWC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,MAAM,CAAC;IAI7C,IAAIC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACrB,IAAI,CAACC,WAAW,GAAGF,IAAI,CAACG,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnD,IAAI,CAACT,WAAW,CAACU,IAAI,EAAE,CAACC,SAAS,CAC9BC,QAAQ,IAAI;MACX,IAAIC,GAAG,GAAGC,MAAM,CAACC,OAAO,CAACH,QAAQ,CAAC;MAClC,IAAI,CAACF,IAAI,GAAG;QACVT,EAAE,EAAEY,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACZ,EAAE;QAChBe,IAAI,EAAGH,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACG,IAAI;QACrBC,MAAM,EAAGJ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACI,MAAM;QACzBC,KAAK,EAAGL,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,KAAK;QACvBC,QAAQ,EAAGN,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACM,QAAQ;QAC7BC,MAAM,EAAGP,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACO,MAAM;QACzBC,GAAG,EAAGR,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACQ;OACjB;IACH,CAAC,CACF;EACH;EAEAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACvB,UAAU,CAACwB,GAAG,CAAW7B,SAAS,EAAGC,WAAW,CAAC;EAC/D;EAEA6B,kBAAkBA,CAACC,OAAiB,EAAEf,IAAU;IAC9C,IAAI,CAACgB,MAAM,GAAG;MACZzB,EAAE,EAAE,IAAI,CAACA,EAAE;MACX0B,OAAO,EAAEF,OAAO;MAChBpB,IAAI,EAAE,IAAI,CAACE,WAAW;MACtBqB,IAAI,EAAElB,IAAI;MACVmB,QAAQ,EAAE;KACX;IACD,OAAO,IAAI,CAAC9B,UAAU,CAAC+B,IAAI,CAASpC,SAAS,EAAE,IAAI,CAACgC,MAAM,EAAE/B,WAAW,CAAC;EAC1E;;AAtCWE,aAAa,C;mBAAbA,aAAa,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAlC,UAAA,GAAAgC,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAlC,WAAA;AAAA;AAAbH,aAAa,C;SAAbA,aAAa;EAAAsC,OAAA,EAAbtC,aAAa,CAAAuC,IAAA;EAAAC,UAAA,EAHZ;AAAM;SAGPxC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}