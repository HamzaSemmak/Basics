{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Response } from 'src/app/Modules/Error/Response';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Services/Auth/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../Components/error/error.component\";\nfunction ResetComponent_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"error\", 18);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"message\", ctx_r0.message);\n  }\n}\nclass ResetComponent {\n  constructor(formBuilder, AuthService, Router, ActivateRoute) {\n    this.formBuilder = formBuilder;\n    this.AuthService = AuthService;\n    this.Router = Router;\n    this.ActivateRoute = ActivateRoute;\n    this.error = true;\n    this.Validators = this.formBuilder.group({\n      password: this.formBuilder.control('', [Validators.required]),\n      confirmPassword: this.formBuilder.control('', [Validators.required])\n    });\n  }\n  ngOnInit() {\n    if (this.AuthService.Check()) {\n      this.Router.navigate(['/']);\n    }\n    if (!localStorage.getItem(\"mail\")) {\n      this.Router.navigate(['auth/login']);\n    }\n    this.email = localStorage.getItem(\"mail\")?.toString();\n    this.AuthService.ForgotPassword(this.email).subscribe(response => {\n      let res = Object.entries(response);\n      this.User = {\n        id: res[0][1].id,\n        name: res[0][1].name,\n        gender: res[0][1].gender,\n        email: res[0][1].email,\n        password: res[0][1].password,\n        active: res[0][1].active,\n        Key: res[0][1].Key\n      };\n    });\n  }\n  ngOnSubmit() {\n    if (this.Validators.valid) {\n      if (this.Validators.value.confirmPassword != this.Validators.value.password) {\n        this.ThrowError(Response.RESPONSE_MSG_AUTH_PASSWORD_MATCH);\n      } else {\n        this.User.password = this.Validators.value.password;\n        this.AuthService.ResetPassword(this.User.id, this.User).subscribe(response => {\n          localStorage.clear();\n          this.Router.navigate([`/auth/forget-password/password/confirm/${this.User.Key}`]);\n          return response;\n        }, error => {\n          this.ThrowError(`Error ${error.status} : ${error.message}`);\n        });\n      }\n    } else {\n      this.ThrowError(Response.RESPONSE_MSG_VAILDATION_FORM);\n    }\n  }\n  ThrowError(Msg) {\n    this.message = Msg;\n  }\n}\nResetComponent.ɵfac = function ResetComponent_Factory(t) {\n  return new (t || ResetComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nResetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetComponent,\n  selectors: [[\"app-reset\"]],\n  decls: 32,\n  vars: 2,\n  consts: [[1, \"authentification\", \"d-flex-center\"], [1, \"container\"], [1, \"authentification-content\", \"shadow\"], [1, \"auth-section\", \"d-none\"], [1, \"auth-section\", \"authentification-form\"], [1, \"app-logo\"], [1, \"icon-key\"], [1, \"block-text\"], [1, \"auth-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"input-floating\"], [\"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\"], [1, \"icon-mail\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"required\", \"\"], [3, \"message\", 4, \"ngIf\"], [1, \"btn\"], [\"routerLink\", \"/auth/login\", 1, \"d-flex\"], [1, \"icon\", \"icon-arrow-left\", \"text-primary\"], [1, \"link\", \"text-primary\"], [3, \"message\"]],\n  template: function ResetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"section\", 3);\n      i0.ɵɵelementStart(4, \"section\", 4)(5, \"div\", 5);\n      i0.ɵɵelement(6, \"i\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 7)(8, \"h2\");\n      i0.ɵɵtext(9, \" Set new password \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"p\");\n      i0.ɵɵtext(11, \" Your new password must be diffrent to previously used password. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"form\", 8);\n      i0.ɵɵlistener(\"ngSubmit\", function ResetComponent_Template_form_ngSubmit_12_listener() {\n        return ctx.ngOnSubmit();\n      });\n      i0.ɵɵelementStart(13, \"div\", 9);\n      i0.ɵɵelement(14, \"input\", 10);\n      i0.ɵɵelementStart(15, \"span\");\n      i0.ɵɵtext(16, \" Password \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"i\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 9);\n      i0.ɵɵelement(19, \"input\", 12);\n      i0.ɵɵelementStart(20, \"span\");\n      i0.ɵɵtext(21, \" Confirm Password \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"i\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"p\");\n      i0.ɵɵtemplate(24, ResetComponent_error_24_Template, 1, 1, \"error\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"button\", 14);\n      i0.ɵɵtext(26, \" Rsest Password \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(27, \"div\", 7)(28, \"div\", 15);\n      i0.ɵɵelement(29, \"i\", 16);\n      i0.ɵɵelementStart(30, \"a\", 17);\n      i0.ɵɵtext(31, \" Back to log in \");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"formGroup\", ctx.Validators);\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngIf\", ctx.error);\n    }\n  },\n  dependencies: [i4.NgIf, i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i5.ErrorComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ResetComponent };","map":{"version":3,"names":["Validators","Response","i0","ɵɵelement","ɵɵpropertyInterpolate","ctx_r0","message","ResetComponent","constructor","formBuilder","AuthService","Router","ActivateRoute","error","group","password","control","required","confirmPassword","ngOnInit","Check","navigate","localStorage","getItem","email","toString","ForgotPassword","subscribe","response","res","Object","entries","User","id","name","gender","active","Key","ngOnSubmit","valid","value","ThrowError","RESPONSE_MSG_AUTH_PASSWORD_MATCH","ResetPassword","clear","status","RESPONSE_MSG_VAILDATION_FORM","Msg","ɵɵdirectiveInject","i1","FormBuilder","i2","i3","ActivatedRoute","selectors","decls","vars","consts","template","ResetComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelementEnd","ɵɵtext","ɵɵlistener","ResetComponent_Template_form_ngSubmit_12_listener","ɵɵtemplate","ResetComponent_error_24_Template","ɵɵadvance","ɵɵproperty"],"sources":["E:\\Workspace\\Basics\\Angular\\Point Of Sale\\PointOfSale\\src\\app\\Components\\Auth\\password\\reset\\reset.component.ts","E:\\Workspace\\Basics\\Angular\\Point Of Sale\\PointOfSale\\src\\app\\Components\\Auth\\password\\reset\\reset.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from 'src/app/Services/Auth/auth.service';\r\nimport { FormBuilder, Validators } from '@angular/forms'\r\nimport { Router, ActivatedRoute  } from '@angular/router';\r\nimport { OwlService } from 'src/app/Services/Carousel/owl.service';\r\nimport { Response  } from 'src/app/Modules/Error/Response';\r\nimport { EmailService } from 'src/app/Services/Email/email.service';\r\nimport { User } from 'src/app/Modules/Model/Users';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { elementAt } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-reset',\r\n  templateUrl: './reset.component.html',\r\n  styleUrls: ['./reset.component.css']\r\n})\r\n\r\nexport class ResetComponent implements OnInit {\r\n  error: boolean = true;\r\n  message: string;\r\n  email: string | any;\r\n  User: User;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private AuthService: AuthService,\r\n    private Router: Router,\r\n    private ActivateRoute: ActivatedRoute\r\n  ) {  }\r\n\r\n  ngOnInit(): void {\r\n    if(this.AuthService.Check())\r\n    {\r\n      this.Router.navigate(['/']);\r\n    }\r\n    if(!localStorage.getItem(\"mail\"))\r\n    {\r\n       this.Router.navigate(['auth/login']);\r\n    }\r\n    this.email = localStorage.getItem(\"mail\")?.toString();\r\n    this.AuthService.ForgotPassword(this.email).subscribe(\r\n      response => {\r\n        let res = Object.entries(response);\r\n        this.User = { \r\n          id: res[0][1].id,\r\n          name:  res[0][1].name,\r\n          gender:  res[0][1].gender,\r\n          email:  res[0][1].email,\r\n          password:  res[0][1].password,\r\n          active:  res[0][1].active,\r\n          Key:  res[0][1].Key,\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  Validators = this.formBuilder.group({\r\n    password: this.formBuilder.control('', [Validators.required]),\r\n    confirmPassword: this.formBuilder.control('', [Validators.required])\r\n  });\r\n\r\n  ngOnSubmit(): void {\r\n    if(this.Validators.valid)\r\n    {\r\n      if(this.Validators.value.confirmPassword != this.Validators.value.password)\r\n      {\r\n        this.ThrowError(Response.RESPONSE_MSG_AUTH_PASSWORD_MATCH);\r\n      }\r\n      else {\r\n        this.User.password = this.Validators.value.password;\r\n        this.AuthService.ResetPassword(this.User.id, this.User).subscribe(\r\n          response => {\r\n            localStorage.clear();\r\n            this.Router.navigate([`/auth/forget-password/password/confirm/${this.User.Key}`]);\r\n            return response;\r\n          },\r\n          (error: HttpErrorResponse) => {\r\n            this.ThrowError(`Error ${error.status} : ${error.message}`);\r\n          },\r\n        )\r\n      }\r\n    }\r\n    else {\r\n      this.ThrowError(Response.RESPONSE_MSG_VAILDATION_FORM)\r\n    }\r\n  }\r\n\r\n  ThrowError(Msg: string): void {\r\n    this.message = Msg;\r\n  }\r\n}\r\n","<section class=\"authentification d-flex-center\">\r\n    <div class=\"container\">\r\n        <div class=\"authentification-content shadow\">\r\n            <section class=\"auth-section d-none\">\r\n            </section>\r\n            <section class=\"auth-section authentification-form\">\r\n                <div class=\"app-logo\">\r\n                    <i class=\"icon-key\"></i>\r\n                </div>\r\n                <div class=\"block-text\">\r\n                    <h2> Set new password </h2>\r\n                    <p>\r\n                        Your new password must be diffrent to previously used password.\r\n                    </p>\r\n                </div>\r\n                <form class=\"auth-form\" [formGroup]=\"Validators\" (ngSubmit)=\"ngOnSubmit()\">\r\n                    <div class=\"input-floating\">\r\n                        <input type=\"password\" formControlName=\"password\" required/>\r\n                        <span> Password </span>\r\n                        <i class=\"icon-mail\"></i>\r\n                    </div>\r\n                    <div class=\"input-floating\">\r\n                        <input type=\"password\" formControlName=\"confirmPassword\" required/>\r\n                        <span> Confirm Password </span>\r\n                        <i class=\"icon-mail\"></i>\r\n                    </div>\r\n                    <p>\r\n                        <error *ngIf=\"error\" message=\"{{ message }}\"></error>\r\n                    </p>\r\n                    <button class=\"btn\">\r\n                        Rsest Password\r\n                    </button>\r\n                </form>\r\n                <div class=\"block-text\">\r\n                    <div class=\"d-flex\" routerLink=\"/auth/login\">\r\n                        <i class=\"icon icon-arrow-left text-primary\"></i>\r\n                        <a class=\"link text-primary\"> Back to log in </a>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n</section>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}