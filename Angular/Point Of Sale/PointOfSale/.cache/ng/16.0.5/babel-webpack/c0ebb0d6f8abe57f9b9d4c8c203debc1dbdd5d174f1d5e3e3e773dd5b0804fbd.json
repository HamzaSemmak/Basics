{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { ApiUsers } from 'src/app/Modules/Config/Api';\nimport { Keys } from 'src/app/Modules/Config/Config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(HttpClient, router) {\n      this.HttpClient = HttpClient;\n      this.router = router;\n    }\n    login(name, password) {\n      return this.HttpClient.get(`${ApiUsers}?email=${name}&password=${password}`, httpOptions);\n    }\n    logOut() {\n      sessionStorage.clear();\n      this.router.navigate(['auth/login']).then(() => {\n        window.location.reload();\n      });\n    }\n    guard(email) {\n      let Key;\n      this.HttpClient.get(`${ApiUsers}?email=${email}`).subscribe(res => {\n        let response = Object.entries(res);\n        Key = response[0][1].Key;\n        sessionStorage.setItem(Keys, Key);\n        this.router.navigate([\"/\"]).then(() => {\n          window.location.reload();\n        });\n      });\n    }\n    User() {\n      var Key = sessionStorage.getItem(Keys);\n      return this.HttpClient.get(`${ApiUsers}?Key=${Key}`, httpOptions);\n    }\n    Check() {\n      if (sessionStorage.getItem(Keys)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    ForgotPassword(email) {\n      return this.HttpClient.get(`${ApiUsers}?email=${email}`, httpOptions);\n    }\n    FindByColumn(Colmun, value) {\n      return this.HttpClient.get(`${ApiUsers}?${Colmun}=${value}`, httpOptions);\n    }\n    ResetPassword(id, User) {\n      return this.HttpClient.put(`${ApiUsers}/${id}`, User);\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}