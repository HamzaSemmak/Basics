{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Response } from 'src/app/Modules/Error/Response';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Services/Auth/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../Components/error/error.component\";\nfunction ResetComponent_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"error\", 18);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"message\", ctx_r0.message);\n  }\n}\nlet ResetComponent = /*#__PURE__*/(() => {\n  class ResetComponent {\n    constructor(formBuilder, AuthService, Router, ActivateRoute) {\n      this.formBuilder = formBuilder;\n      this.AuthService = AuthService;\n      this.Router = Router;\n      this.ActivateRoute = ActivateRoute;\n      this.error = true;\n      this.Validators = this.formBuilder.group({\n        password: this.formBuilder.control('', [Validators.required]),\n        confirmPassword: this.formBuilder.control('', [Validators.required])\n      });\n    }\n    ngOnInit() {\n      if (this.AuthService.Check()) {\n        this.Router.navigate(['/']);\n      }\n      if (!localStorage.getItem(\"mail\")) {\n        this.Router.navigate(['auth/login']);\n      }\n      this.email = localStorage.getItem(\"mail\")?.toString();\n      this.AuthService.ForgotPassword(this.email).subscribe(response => {\n        let res = Object.entries(response);\n        this.User = {\n          id: res[0][1].id,\n          name: res[0][1].name,\n          gender: res[0][1].gender,\n          email: res[0][1].email,\n          password: res[0][1].password,\n          active: res[0][1].active,\n          Key: res[0][1].Key\n        };\n      });\n    }\n    ngOnSubmit() {\n      if (this.Validators.valid) {\n        if (this.Validators.value.confirmPassword != this.Validators.value.password) {\n          this.ThrowError(Response.RESPONSE_MSG_AUTH_PASSWORD_MATCH);\n        } else {\n          this.User.password = this.Validators.value.password;\n          this.AuthService.ResetPassword(this.User.id, this.User).subscribe(response => {\n            localStorage.clear();\n            this.Router.navigate([`/auth/forget-password/password/confirm/${this.User.Key}`]);\n            return response;\n          }, error => {\n            this.ThrowError(`Error ${error.status} : ${error.message}`);\n          });\n        }\n      } else {\n        this.ThrowError(Response.RESPONSE_MSG_VAILDATION_FORM);\n      }\n    }\n    ThrowError(Msg) {\n      this.message = Msg;\n    }\n  }\n  ResetComponent.ɵfac = function ResetComponent_Factory(t) {\n    return new (t || ResetComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  ResetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetComponent,\n    selectors: [[\"app-reset\"]],\n    decls: 32,\n    vars: 2,\n    consts: [[1, \"authentification\", \"d-flex-center\"], [1, \"container\"], [1, \"authentification-content\", \"shadow\"], [1, \"auth-section\", \"d-none\"], [1, \"auth-section\", \"authentification-form\"], [1, \"app-logo\"], [1, \"icon-key\"], [1, \"block-text\"], [1, \"auth-form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"input-floating\"], [\"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\"], [1, \"icon-mail\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"required\", \"\"], [3, \"message\", 4, \"ngIf\"], [1, \"btn\"], [\"routerLink\", \"/auth/login\", 1, \"d-flex\"], [1, \"icon\", \"icon-arrow-left\", \"text-primary\"], [1, \"link\", \"text-primary\"], [3, \"message\"]],\n    template: function ResetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"section\", 3);\n        i0.ɵɵelementStart(4, \"section\", 4)(5, \"div\", 5);\n        i0.ɵɵelement(6, \"i\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 7)(8, \"h2\");\n        i0.ɵɵtext(9, \" Set new password \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"p\");\n        i0.ɵɵtext(11, \" Your new password must be diffrent to previously used password. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"form\", 8);\n        i0.ɵɵlistener(\"ngSubmit\", function ResetComponent_Template_form_ngSubmit_12_listener() {\n          return ctx.ngOnSubmit();\n        });\n        i0.ɵɵelementStart(13, \"div\", 9);\n        i0.ɵɵelement(14, \"input\", 10);\n        i0.ɵɵelementStart(15, \"span\");\n        i0.ɵɵtext(16, \" Password \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"i\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 9);\n        i0.ɵɵelement(19, \"input\", 12);\n        i0.ɵɵelementStart(20, \"span\");\n        i0.ɵɵtext(21, \" Confirm Password \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"i\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"p\");\n        i0.ɵɵtemplate(24, ResetComponent_error_24_Template, 1, 1, \"error\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"button\", 14);\n        i0.ɵɵtext(26, \" Rsest Password \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 7)(28, \"div\", 15);\n        i0.ɵɵelement(29, \"i\", 16);\n        i0.ɵɵelementStart(30, \"a\", 17);\n        i0.ɵɵtext(31, \" Back to log in \");\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"formGroup\", ctx.Validators);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n      }\n    },\n    dependencies: [i4.NgIf, i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i5.ErrorComponent]\n  });\n  return ResetComponent;\n})();\nexport { ResetComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}