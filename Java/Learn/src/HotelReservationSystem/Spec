    - Hotel Reservation System :

Project Description:
In this advanced project, you will create a console-based hotel
reservation system with additional features and complexities.
Users can make and manage hotel room reservations, check room availability,
and handle bookings. You will apply advanced Object-Oriented Programming
(OOP) principles and concepts to create a robust and feature-rich system.
 1 - HotelRoom Class (Generic):
The HotelRoom class is parameterized with generics to represent different types of hotel rooms,
such as standard, deluxe, or suite.
Each room has attributes like room number, room type, price, and availability.
Attributes:
roomNumber (int) - The room number.
roomType (String) - The type of room (e.g., standard, deluxe, suite).
price (double) - The nightly price of the room.
isAvailable (boolean) - Indicates whether the room is available for booking.
Methods:
reserveRoom(startDate: Date, endDate: Date, guestName: String): boolean
    - Reserve the room for a specific date range and guest name.
      Return true if the reservation is successful; otherwise, return false.
cancelReservation(reservationID: String): boolean
    - Cancel the room reservation using a unique reservation ID.
      Return true if the cancellation is successful; otherwise, return false.
 2 - HotelInventory Management:
Implement an HotelInventory class that manages the hotel's room inventory.
This class should use generics to store and manage different types of hotel rooms.
Attributes:
roomInventory (List<HotelRoom>) - A list to store hotel room objects.
Methods:
addRoom(room: HotelRoom): boolean
    - Add a room to the inventory. Return true if the addition is successful; otherwise, return false.
removeRoom(room: HotelRoom): boolean
    - Remove a room from the inventory. Return true if the removal is successful; otherwise, return false.
findAvailableRooms(startDate: Date, endDate: Date): List<HotelRoom>
    - Search for available rooms for a specific date range.
  3 - User Class:
Create a User class to represent users of the hotel reservation system.
Users can have attributes like a username, password, and a list of reservations.
Attributes:
username (String) - The username of the user.
password (String) - The password of the user.
reservations (List<HotelReservation>) - A list of reservations made by the user.
Methods:
authenticate(username: String, password: String): boolean
    - Authenticate a user by checking the provided username and password.
 4 - HotelReservation Class:
Implement a HotelReservation class to represent hotel room reservations made by users.
Each reservation should include details such as the room, guest name, check-in date, check-out date, and a unique reservation ID.
Attributes:
reservationID (String) - A unique reservation ID.
room (HotelRoom) - The reserved hotel room.
guestName (String) - The name of the guest.
startDate (Date) - The check-in date.
endDate (Date) - The check-out date.
  5 - Console Interaction:
Create a console-based menu system for users to interact with the hotel reservation system.
Implement a text-based user interface that guides users through
registration, login, room booking, and reservation management.
 6 - Advanced Features:
Payment Integration: Integrate a payment system for room reservations, including payment processing and invoices.
User Authentication: Implement authentication with roles (e.g., regular users and administrators) and access control.
Cancellation Policies: Define flexible cancellation policies for different room types and seasons.
Email Notifications: Send email confirmations, reminders, and invoices to users upon booking and reservation updates.
Seasonal Pricing: Implement dynamic pricing based on seasons and events.
Concurrency: Use multithreading to handle concurrent room reservations efficiently.
 7 - Project Goals:
This advanced project challenges you to apply advanced OOP principles, including inheritance,
interfaces, and advanced data structures. It also involves dealing with complex business logic,
concurrency, and user authentication, making it a comprehensive exercise in software development.
